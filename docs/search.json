[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/bigtencfbavgplays/index.html",
    "href": "posts/bigtencfbavgplays/index.html",
    "title": "Big Ten College Football average plays",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nCode\nlibrary(scales)\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\n\n\nCode\nlogs24 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\n\nRows: 1717 Columns: 79\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): Location, Opponent, Result, OT, Bowl.x, TeamURL, Outcome, Bowl.y,...\ndbl  (64): Rk, Gtm, Points, PointsOpp, PassCmp, PassAtt, PassPct, PassYds, P...\nlgl   (3): Score, TeamScore, OpponentScore\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nlogs25 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs25.csv\")\n\n\nRows: 711 Columns: 77\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Location, Opponent, Result, OT, TeamURL, Outcome, Team, Conferenc...\ndbl  (64): Rk, Gtm, Points, PointsOpp, PassCmp, PassAtt, PassPct, PassYds, P...\nlgl   (3): Score, TeamScore, OpponentScore\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nlogs_big10_24 &lt;- logs24 |&gt; \n  filter(Conference == \"Big Ten Conference\")\n\n\n\n\nCode\nlogs_big10_25 &lt;- logs25 |&gt; \n  filter(Conference == \"Big Ten Conference\")\n\n\n\n\nCode\navg_plays_24 &lt;- logs_big10_24 |&gt; \n  group_by(Team) |&gt; \n  summarise(avg_plays = mean(TotalPlays))\n\n\n\n\nCode\navg_plays_25 &lt;- logs_big10_25 |&gt; \n  group_by(Team) |&gt; \n  summarise(avg_plays = mean(TotalPlays))\n\n\nTo start, I used ggplot() with the 2025 dataset (avg_plays_25) to create a bar chart, mapping Team to the x-axis and avg_plays to the y-axis, then reordered the teams by average plays. I styled the chart with geom_col(fill = “red”), added axis labels, and used coord_flip() to make the teams readable along the vertical axis. I repeated the same process for the 2024 dataset (avg_plays_24), this time filling the bars blue to distinguish the seasons.\n\n\nCode\nggplot(avg_plays_24, aes(x = reorder(Team, avg_plays), y = avg_plays)) + \n  geom_col(fill = \"blue\") + \n  scale_y_continuous(labels = comma) + \n  labs(\n    title = \"More plays don't equate to success, as seen by the 4-8 Terps\", \n    x = \"Team\", \n    y = \"Average Plays in 2024\"\n  ) + \n  theme_minimal() + \n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(avg_plays_25, aes(x = reorder(Team, avg_plays), y = avg_plays)) + \n  geom_col(fill = \"red\") + \n  scale_y_continuous(labels = comma) + \n  labs(\n    title = \"Maryland averages the fifth-most offensive plays with a freshman QB\", \n    x = \"Team\", \n    y = \"Average Plays in 2025\"\n  ) + \n  theme_minimal() + \n  coord_flip()\n\n\n\n\n\n\n\n\n\nThe 2025 chart shows Maryland averaging the fifth-most offensive plays, suggesting tempo has remained a key part of its strategy under a new quarterback. In contrast, the 2024 chart highlights that more offensive plays didn’t always translate to wins, as Maryland still finished 4–8 despite ranking high in tempo. Across the two years, the overall distribution indicates Big Ten teams are running slightly fewer plays on average in 2025 compared to 2024. A notable shift is that Rutgers and Indiana moved upward in the rankings this season, while teams like Purdue and Iowa have fallen further behind.\nThe biggest takeaway is that pace alone doesn’t guarantee success — it must be paired with efficiency and execution."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/firstpost/index.html",
    "href": "posts/firstpost/index.html",
    "title": "Why do students go at halftime?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nIt was halftime at SECU Stadium, and nobody was around."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "How Maryland Scores: Aces, blocks, kills and errors by the numbers\n\n\n\n\n\n\n\n\n\n\n\nOct 20, 2025\n\n\nMichael Howes\n\n\n\n\n\n\n\n\n\n\n\n\nBig Ten College Football average plays\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2025\n\n\nMichael Howes\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 9, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWhy do students go at halftime?\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 9, 2025\n\n\nMichael Howes\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nOct 6, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2025BigTenVolleyball/index.html",
    "href": "posts/2025BigTenVolleyball/index.html",
    "title": "How Maryland Scores: Aces, blocks, kills and errors by the numbers",
    "section": "",
    "text": "I first had to load the tidyverse and waffle libraries so R could read the data, summarize it and create the waffle charts.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nCode\nlibrary(waffle)\n\n\n\n\nCode\nmatch_data &lt;- read_csv(\"ncaa_womens_volleyball_matchstats_2025.csv\")\n\n\nRows: 5360 Columns: 38\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (33): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nI next loaded the volleyball match data, filtered it for Maryland, calculated the team’s total stats and stored those totals in a simple named vector called md.\n\n\nCode\nmaryland_data &lt;- match_data |&gt;\n  filter(team == \"Maryland\")\n\n\n\n\nCode\nmd &lt;- maryland_data|&gt;\n  summarise(\n    total_kills = sum(kills),\n    total_blocks = sum(block_solos + (block_assists / 2)),\n    total_aces = sum(aces),\n    opponent_errors = sum(defensive_errors)\n  )\n\nmd\n\n\n# A tibble: 1 × 4\n  total_kills total_blocks total_aces opponent_errors\n        &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;\n1         574         136.         73             298\n\n\n\n\nCode\nmd &lt;- c(\n  Kills = 574,\n  Blocks = 135.5,\n  Aces = 73,\n  OpponentErrors = 298\n)\n\n\n\n\nCode\nmd\n\n\n         Kills         Blocks           Aces OpponentErrors \n         574.0          135.5           73.0          298.0 \n\n\nI created a waffle chart showing Maryland’s point breakdown, scaling the totals for display and using different colors for each category.\n\n\nCode\nwaffle(md / 25,\n       rows = 10,\n       title = \"Maryland's points\",\n       xlab = \"1 square = 1 point\",\n       colors = c(\"red\", \"black\", \"yellow\", \"grey\"))\n\n\n\n\n\n\n\n\n\nI filtered the data for Wisconsin, calculated its total stats and saved those values in a named vector called wi.\n\n\nCode\nwisconsin_data &lt;- match_data |&gt;\n  filter(team == \"Wisconsin\")\n\n\n\n\nCode\nwi_totals &lt;- wisconsin_data |&gt;\n  summarise(\n    total_kills = sum(kills),\n    total_blocks = sum(block_solos + (block_assists / 2)),\n    total_aces = sum(aces),\n    opponent_errors = sum(defensive_errors)\n  )\n\n\n\n\nCode\nwi_totals\n\n\n# A tibble: 1 × 4\n  total_kills total_blocks total_aces opponent_errors\n        &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;\n1         756          147         75             291\n\n\n\n\nCode\nwi &lt;- c(\n  Kills = 756,\n  Blocks = 147,\n  Aces = 75,\n  OpponentErrors = 291\n)\n\n\nI combined Maryland’s and Wisconsin’s waffle charts side by side to compare their point distributions.\n\n\nCode\niron(\n  waffle(md / 25,\n         rows = 10,\n         title = \"Maryland's points\",\n         xlab = \"1 square = 1 point\",\n         colors = c(\"red\", \"black\", \"yellow\", \"grey\")),\n  waffle(wi / 25,\n         rows = 10,\n         title = \"Wisconsin's points\",\n         xlab = \"1 square = 1 point\",\n         colors = c(\"red\", \"black\", \"gray\", \"darkred\"))\n)\n\n\n\n\n\n\n\n\n\nMaryland’s point distribution shows a more balanced mix across categories, with kills making up the largest share but a notable contribution from opponent errors as well. Wisconsin relies more heavily on kills and blocks, indicating a stronger offensive presence at the net. Maryland earns a greater portion of its points from serving and opponent mistakes, while Wisconsin’s totals suggest it creates more of its own scoring opportunities through attack efficiency and front-row play."
  }
]